// GENERATED BY go:generate. DO NOT EDIT.

syntax = "proto3";
package authwise.identity.v1alpha1;

import "google/api/annotations.proto";
import "authwise/types/core/v1alpha1/core.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "gitlab.authwise.io/authwise/authapi/gen/pb/authwise/identity/v1alpha1";

service AuthwiseIdentityService {
  rpc GetTenant(GetTenantRequest) returns (authwise.types.core.v1alpha1.Tenant) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*}" 
    };
  }

  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants"
    };
  }

  rpc CreateTenant(CreateTenantRequest) returns (authwise.types.core.v1alpha1.Tenant) {
    option (google.api.http) = {
      post: "/v1/tenants"
      body: "*"
    };
  }

  rpc UpdateTenant(UpdateTenantRequest) returns (authwise.types.core.v1alpha1.Tenant) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*}" 
      body: "tenant"
    };
  }

  rpc PatchTenant(PatchTenantRequest) returns (authwise.types.core.v1alpha1.Tenant) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*}" 
      body: "*"
    };
  }

  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*}" 
    };
  }

  rpc GetDomain(GetDomainRequest) returns (authwise.types.core.v1alpha1.Domain) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/domains/*}" 
    };
  }

  rpc ListDomains(ListDomainsRequest) returns (ListDomainsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/domains"
    };
  }

  rpc CreateDomain(CreateDomainRequest) returns (authwise.types.core.v1alpha1.Domain) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/domains"
      body: "*"
    };
  }

  rpc UpdateDomain(UpdateDomainRequest) returns (authwise.types.core.v1alpha1.Domain) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/domains/*}" 
      body: "domain"
    };
  }

  rpc PatchDomain(PatchDomainRequest) returns (authwise.types.core.v1alpha1.Domain) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/domains/*}" 
      body: "*"
    };
  }

  rpc DeleteDomain(DeleteDomainRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/domains/*}" 
    };
  }

  rpc GetIssuer(GetIssuerRequest) returns (authwise.types.core.v1alpha1.Issuer) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/issuers/*}" 
    };
  }

  rpc ListIssuers(ListIssuersRequest) returns (ListIssuersResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/issuers"
    };
  }

  rpc CreateIssuer(CreateIssuerRequest) returns (authwise.types.core.v1alpha1.Issuer) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/issuers"
      body: "*"
    };
  }

  rpc UpdateIssuer(UpdateIssuerRequest) returns (authwise.types.core.v1alpha1.Issuer) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*}" 
      body: "issuer"
    };
  }

  rpc PatchIssuer(PatchIssuerRequest) returns (authwise.types.core.v1alpha1.Issuer) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/issuers/*}" 
      body: "*"
    };
  }

  rpc DeleteIssuer(DeleteIssuerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/issuers/*}" 
    };
  }

  rpc GetAsset(GetAssetRequest) returns (authwise.types.core.v1alpha1.Asset) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/assets/*}" 
    };
  }

  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/assets"
    };
  }

  rpc CreateAsset(CreateAssetRequest) returns (authwise.types.core.v1alpha1.Asset) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/assets"
      body: "*"
    };
  }

  rpc UpdateAsset(UpdateAssetRequest) returns (authwise.types.core.v1alpha1.Asset) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/assets/*}" 
      body: "asset"
    };
  }

  rpc PatchAsset(PatchAssetRequest) returns (authwise.types.core.v1alpha1.Asset) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/assets/*}" 
      body: "*"
    };
  }

  rpc DeleteAsset(DeleteAssetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/assets/*}" 
    };
  }

  rpc UploadAsset(stream UploadAssetRequest) returns (google.protobuf.Empty) {
  }

  rpc DownloadAsset(DownloadAssetRequest) returns (stream AssetDownloadResponse) {
  }

  rpc RemoveAsset(RemoveAssetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/files/{name=tenants/*/assets/*}" 
    };
  }

  rpc GetSecret(GetSecretRequest) returns (authwise.types.core.v1alpha1.Secret) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/secrets/*}" 
    };
  }

  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/secrets"
    };
  }

  rpc CreateSecret(CreateSecretRequest) returns (authwise.types.core.v1alpha1.Secret) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/secrets"
      body: "*"
    };
  }

  rpc UpdateSecret(UpdateSecretRequest) returns (authwise.types.core.v1alpha1.Secret) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/secrets/*}" 
      body: "secret"
    };
  }

  rpc PatchSecret(PatchSecretRequest) returns (authwise.types.core.v1alpha1.Secret) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/secrets/*}" 
      body: "*"
    };
  }

  rpc DeleteSecret(DeleteSecretRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/secrets/*}" 
    };
  }

  rpc GetRealm(GetRealmRequest) returns (authwise.types.core.v1alpha1.Realm) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/realms/*}" 
    };
  }

  rpc ListRealms(ListRealmsRequest) returns (ListRealmsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/realms"
    };
  }

  rpc CreateRealm(CreateRealmRequest) returns (authwise.types.core.v1alpha1.Realm) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/realms"
      body: "*"
    };
  }

  rpc UpdateRealm(UpdateRealmRequest) returns (authwise.types.core.v1alpha1.Realm) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/realms/*}" 
      body: "realm"
    };
  }

  rpc PatchRealm(PatchRealmRequest) returns (authwise.types.core.v1alpha1.Realm) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*}" 
      body: "*"
    };
  }

  rpc DeleteRealm(DeleteRealmRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/realms/*}" 
    };
  }

  rpc GetUser(GetUserRequest) returns (authwise.types.core.v1alpha1.User) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/realms/*/users/*}" 
    };
  }

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*}/users"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (authwise.types.core.v1alpha1.User) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*}/users"
      body: "*"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (authwise.types.core.v1alpha1.User) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/realms/*/users/*}" 
      body: "user"
    };
  }

  rpc PatchUser(PatchUserRequest) returns (authwise.types.core.v1alpha1.User) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*/users/*}" 
      body: "*"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/realms/*/users/*}" 
    };
  }

  rpc UserSearchPredicates(UserSearchPredicatesRequest) returns (UserSearchPredicatesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*}/users/search/predicates"
    };
  }

  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*}/users/search"
      body: "*"
    };
  }

  rpc ListRolesByUser (ListRolesByUserRequest) returns (ListRolesByUserResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/realms/*/users/*}/roles"
    };
  }
				
  rpc AssociateRolesToUser (AssociateRolesToUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/realms/*/users/*}/roles"
      body: "*"
    };
  }
		
  rpc GetProvider(GetProviderRequest) returns (authwise.types.core.v1alpha1.Provider) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/realms/*/providers/*}" 
    };
  }

  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*}/providers"
    };
  }

  rpc CreateProvider(CreateProviderRequest) returns (authwise.types.core.v1alpha1.Provider) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*}/providers"
      body: "*"
    };
  }

  rpc UpdateProvider(UpdateProviderRequest) returns (authwise.types.core.v1alpha1.Provider) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/realms/*/providers/*}" 
      body: "provider"
    };
  }

  rpc PatchProvider(PatchProviderRequest) returns (authwise.types.core.v1alpha1.Provider) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/realms/*/providers/*}" 
      body: "*"
    };
  }

  rpc DeleteProvider(DeleteProviderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/realms/*/providers/*}" 
    };
  }

  rpc GetClient(GetClientRequest) returns (authwise.types.core.v1alpha1.Client) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/issuers/*/clients/*}" 
    };
  }

  rpc ListClients(ListClientsRequest) returns (ListClientsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/issuers/*}/clients"
    };
  }

  rpc CreateClient(CreateClientRequest) returns (authwise.types.core.v1alpha1.Client) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/issuers/*}/clients"
      body: "*"
    };
  }

  rpc UpdateClient(UpdateClientRequest) returns (authwise.types.core.v1alpha1.Client) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/clients/*}" 
      body: "client"
    };
  }

  rpc PatchClient(PatchClientRequest) returns (authwise.types.core.v1alpha1.Client) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/issuers/*/clients/*}" 
      body: "*"
    };
  }

  rpc DeleteClient(DeleteClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/issuers/*/clients/*}" 
    };
  }

  rpc GetRole(GetRoleRequest) returns (authwise.types.core.v1alpha1.Role) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/issuers/*/audiences/*/roles/*}" 
    };
  }

  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*/audiences/*}/roles"
    };
  }

  rpc CreateRole(CreateRoleRequest) returns (authwise.types.core.v1alpha1.Role) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*/audiences/*}/roles"
      body: "*"
    };
  }

  rpc UpdateRole(UpdateRoleRequest) returns (authwise.types.core.v1alpha1.Role) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/audiences/*/roles/*}" 
      body: "role"
    };
  }

  rpc PatchRole(PatchRoleRequest) returns (authwise.types.core.v1alpha1.Role) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/issuers/*/audiences/*/roles/*}" 
      body: "*"
    };
  }

  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/issuers/*/audiences/*/roles/*}" 
    };
  }

  rpc ListPermissionsByRole (ListPermissionsByRoleRequest) returns (ListPermissionsByRoleResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/issuers/*/audiences/*/roles/*}/permissions"
    };
  }
				
  rpc AssociatePermissionsToRole (AssociatePermissionsToRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/audiences/*/roles/*}/permissions"
      body: "*"
    };
  }
		
  rpc GetPermission(GetPermissionRequest) returns (authwise.types.core.v1alpha1.Permission) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/issuers/*/audiences/*/permissions/*}" 
    };
  }

  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*/audiences/*}/permissions"
    };
  }

  rpc CreatePermission(CreatePermissionRequest) returns (authwise.types.core.v1alpha1.Permission) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*/audiences/*}/permissions"
      body: "*"
    };
  }

  rpc UpdatePermission(UpdatePermissionRequest) returns (authwise.types.core.v1alpha1.Permission) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/audiences/*/permissions/*}" 
      body: "permission"
    };
  }

  rpc PatchPermission(PatchPermissionRequest) returns (authwise.types.core.v1alpha1.Permission) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/issuers/*/audiences/*/permissions/*}" 
      body: "*"
    };
  }

  rpc DeletePermission(DeletePermissionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/issuers/*/audiences/*/permissions/*}" 
    };
  }

  rpc GetAudience(GetAudienceRequest) returns (authwise.types.core.v1alpha1.Audience) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/issuers/*/audiences/*}" 
    };
  }

  rpc ListAudiences(ListAudiencesRequest) returns (ListAudiencesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/issuers/*}/audiences"
    };
  }

  rpc CreateAudience(CreateAudienceRequest) returns (authwise.types.core.v1alpha1.Audience) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/issuers/*}/audiences"
      body: "*"
    };
  }

  rpc UpdateAudience(UpdateAudienceRequest) returns (authwise.types.core.v1alpha1.Audience) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/audiences/*}" 
      body: "audience"
    };
  }

  rpc PatchAudience(PatchAudienceRequest) returns (authwise.types.core.v1alpha1.Audience) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/issuers/*/audiences/*}" 
      body: "*"
    };
  }

  rpc DeleteAudience(DeleteAudienceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/issuers/*/audiences/*}" 
    };
  }

  rpc GetScope(GetScopeRequest) returns (authwise.types.core.v1alpha1.Scope) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/issuers/*/audiences/*/scopes/*}" 
    };
  }

  rpc ListScopes(ListScopesRequest) returns (ListScopesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*/realms/*/audiences/*}/scopes"
    };
  }

  rpc CreateScope(CreateScopeRequest) returns (authwise.types.core.v1alpha1.Scope) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*/realms/*/audiences/*}/scopes"
      body: "*"
    };
  }

  rpc UpdateScope(UpdateScopeRequest) returns (authwise.types.core.v1alpha1.Scope) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/audiences/*/scopes/*}" 
      body: "scope"
    };
  }

  rpc PatchScope(PatchScopeRequest) returns (authwise.types.core.v1alpha1.Scope) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/issuers/*/audiences/*/scopes/*}" 
      body: "*"
    };
  }

  rpc DeleteScope(DeleteScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/issuers/*/audiences/*/scopes/*}" 
    };
  }

  rpc ListPermissionsByScope (ListPermissionsByScopeRequest) returns (ListPermissionsByScopeResponse) {
    option (google.api.http) = {
      get: "/v1/{name=tenants/*/issuers/*/audiences/*/scopes/*}/permissions"
    };
  }
				
  rpc AssociatePermissionsToScope (AssociatePermissionsToScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/issuers/*/audiences/*/scopes/*}/permissions"
      body: "*"
    };
  }
		
  rpc GetEvent(GetEventRequest) returns (authwise.types.core.v1alpha1.Event) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/events/*}" 
    };
  }

  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/events"
    };
  }

  rpc EventSearchPredicates(EventSearchPredicatesRequest) returns (EventSearchPredicatesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/events/search/predicates"
    };
  }

  rpc SearchEvents(SearchEventsRequest) returns (SearchEventsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/events/search"
      body: "*"
    };
  }

  rpc GetTheme(GetThemeRequest) returns (authwise.types.core.v1alpha1.Theme) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/themes/*}" 
    };
  }

  rpc ListThemes(ListThemesRequest) returns (ListThemesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/themes"
    };
  }

  rpc CreateTheme(CreateThemeRequest) returns (authwise.types.core.v1alpha1.Theme) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/themes"
      body: "*"
    };
  }

  rpc UpdateTheme(UpdateThemeRequest) returns (authwise.types.core.v1alpha1.Theme) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/themes/*}" 
      body: "theme"
    };
  }

  rpc PatchTheme(PatchThemeRequest) returns (authwise.types.core.v1alpha1.Theme) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/themes/*}" 
      body: "*"
    };
  }

  rpc DeleteTheme(DeleteThemeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/themes/*}" 
    };
  }

  rpc GetAppearanceProfile(GetAppearanceProfileRequest) returns (authwise.types.core.v1alpha1.AppearanceProfile) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/appearance_profiles/*}" 
    };
  }

  rpc ListAppearanceProfiles(ListAppearanceProfilesRequest) returns (ListAppearanceProfilesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/appearance_profiles"
    };
  }

  rpc CreateAppearanceProfile(CreateAppearanceProfileRequest) returns (authwise.types.core.v1alpha1.AppearanceProfile) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/appearance_profiles"
      body: "*"
    };
  }

  rpc UpdateAppearanceProfile(UpdateAppearanceProfileRequest) returns (authwise.types.core.v1alpha1.AppearanceProfile) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/appearance_profiles/*}" 
      body: "appearance_profile"
    };
  }

  rpc PatchAppearanceProfile(PatchAppearanceProfileRequest) returns (authwise.types.core.v1alpha1.AppearanceProfile) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/appearance_profiles/*}" 
      body: "*"
    };
  }

  rpc DeleteAppearanceProfile(DeleteAppearanceProfileRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/appearance_profiles/*}" 
    };
  }

  rpc GetEndpoint(GetEndpointRequest) returns (authwise.types.core.v1alpha1.Endpoint) {
    option (google.api.http) = { 
      get: "/v1/{name=tenants/*/endpoints/*}" 
    };
  }

  rpc ListEndpoints(ListEndpointsRequest) returns (ListEndpointsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=tenants/*}/endpoints"
    };
  }

  rpc CreateEndpoint(CreateEndpointRequest) returns (authwise.types.core.v1alpha1.Endpoint) {
    option (google.api.http) = {
      post: "/v1/{parent=tenants/*}/endpoints"
      body: "*"
    };
  }

  rpc UpdateEndpoint(UpdateEndpointRequest) returns (authwise.types.core.v1alpha1.Endpoint) {
    option (google.api.http) = {
      put: "/v1/{name=tenants/*/endpoints/*}" 
      body: "endpoint"
    };
  }

  rpc PatchEndpoint(PatchEndpointRequest) returns (authwise.types.core.v1alpha1.Endpoint) {
    option (google.api.http) = {
      patch: "/v1/{name=tenants/*/endpoints/*}" 
      body: "*"
    };
  }

  rpc DeleteEndpoint(DeleteEndpointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=tenants/*/endpoints/*}" 
    };
  }

}
message GetTenantRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListTenantsRequest {
  repeated string fields = 1;
  int32 page_size = 2;
  string page_token = 3;
  string selection = 4;
}

message ListTenantsResponse {
  repeated authwise.types.core.v1alpha1.Tenant list = 1;
  string next_page_token = 2;
}

message CreateTenantRequest {
  authwise.types.core.v1alpha1.Tenant tenant = 1;
  string url = 2;
  string admin_user_id = 3;
  bool create_default_realm = 4;
  bool create_default_audience = 5;
  bool create_default_appearance_profile = 6;
  bool create_default_login_client = 7;
  bool create_admin_client_credentials_client = 8;
}

message PatchTenantRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Tenant tenant = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateTenantRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Tenant tenant = 2;
}
message DeleteTenantRequest {
  string name = 1;
}


message GetDomainRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListDomainsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListDomainsResponse {
  repeated authwise.types.core.v1alpha1.Domain list = 1;
  string next_page_token = 2;
}

message CreateDomainRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Domain domain = 2;
}

message PatchDomainRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Domain domain = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateDomainRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Domain domain = 2;
}
message DeleteDomainRequest {
  string name = 1;
}


message GetIssuerRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListIssuersRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListIssuersResponse {
  repeated authwise.types.core.v1alpha1.Issuer list = 1;
  string next_page_token = 2;
}

message CreateIssuerRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Issuer issuer = 2;
}

message PatchIssuerRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Issuer issuer = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateIssuerRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Issuer issuer = 2;
}
message DeleteIssuerRequest {
  string name = 1;
}


message GetAssetRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListAssetsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListAssetsResponse {
  repeated authwise.types.core.v1alpha1.Asset list = 1;
  string next_page_token = 2;
}

message CreateAssetRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Asset asset = 2;
}

message PatchAssetRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Asset asset = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateAssetRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Asset asset = 2;
}
message DeleteAssetRequest {
  string name = 1;
}


message UploadAssetRequest {
  string name = 1;
  bytes data = 2;
}

message DownloadAssetRequest {
  string name = 1;
}

message AssetDownloadResponse {
  bytes data = 1;
}

message RemoveAssetRequest {
  string name = 1;
}


message GetSecretRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListSecretsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListSecretsResponse {
  repeated authwise.types.core.v1alpha1.Secret list = 1;
  string next_page_token = 2;
}

message CreateSecretRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Secret secret = 2;
}

message PatchSecretRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Secret secret = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateSecretRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Secret secret = 2;
}
message DeleteSecretRequest {
  string name = 1;
}


message GetRealmRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListRealmsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListRealmsResponse {
  repeated authwise.types.core.v1alpha1.Realm list = 1;
  string next_page_token = 2;
}

message CreateRealmRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Realm realm = 2;
  bool create_default_providers = 3;
}

message PatchRealmRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Realm realm = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateRealmRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Realm realm = 2;
}
message DeleteRealmRequest {
  string name = 1;
}


message GetUserRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListUsersRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListUsersResponse {
  repeated authwise.types.core.v1alpha1.User list = 1;
  string next_page_token = 2;
}

message CreateUserRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.User user = 2;
}

message PatchUserRequest {
  string name = 1;
  authwise.types.core.v1alpha1.User user = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateUserRequest {
  string name = 1;
  authwise.types.core.v1alpha1.User user = 2;
}
message DeleteUserRequest {
  string name = 1;
}


message SearchUsersRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3; 
  string page_token = 4;
  string selection = 5;
  repeated authwise.types.core.v1alpha1.SearchPredicate criteria = 6;
}

message UserSearchResult {
  float score = 1;
  authwise.types.core.v1alpha1.User entity = 2;
}

message UserSearchPredicatesRequest {
  string parent = 7;
}

message UserSearchPredicatesResponse {
  repeated authwise.types.core.v1alpha1.SearchPredicateDescriptor predicates = 1;
}

message SearchUsersResponse {
  repeated UserSearchResult list = 1;
  string next_page_token = 2;
}

message ListRolesByUserRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string selection = 4;
}

message ListRolesByUserResponse {
  repeated authwise.types.core.v1alpha1.Role roles = 1;
  string next_page_token = 2;
}

message AssociateRolesToUserRequest {
  string name = 1;
  authwise.types.core.v1alpha1.AssociationRequest association = 2;
}

		
message GetProviderRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListProvidersRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListProvidersResponse {
  repeated authwise.types.core.v1alpha1.Provider list = 1;
  string next_page_token = 2;
}

message CreateProviderRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Provider provider = 2;
}

message PatchProviderRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Provider provider = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateProviderRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Provider provider = 2;
}
message DeleteProviderRequest {
  string name = 1;
}


message GetClientRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListClientsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListClientsResponse {
  repeated authwise.types.core.v1alpha1.Client list = 1;
  string next_page_token = 2;
}

message CreateClientRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Client client = 2;
}

message PatchClientRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Client client = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateClientRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Client client = 2;
}
message DeleteClientRequest {
  string name = 1;
}


message GetRoleRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListRolesRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListRolesResponse {
  repeated authwise.types.core.v1alpha1.Role list = 1;
  string next_page_token = 2;
}

message CreateRoleRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Role role = 2;
}

message PatchRoleRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Role role = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateRoleRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Role role = 2;
}
message DeleteRoleRequest {
  string name = 1;
}


message ListPermissionsByRoleRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string selection = 4;
}

message ListPermissionsByRoleResponse {
  repeated authwise.types.core.v1alpha1.Permission permissions = 1;
  string next_page_token = 2;
}

message AssociatePermissionsToRoleRequest {
  string name = 1;
  authwise.types.core.v1alpha1.AssociationRequest association = 2;
}

		
message GetPermissionRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListPermissionsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListPermissionsResponse {
  repeated authwise.types.core.v1alpha1.Permission list = 1;
  string next_page_token = 2;
}

message CreatePermissionRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Permission permission = 2;
}

message PatchPermissionRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Permission permission = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdatePermissionRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Permission permission = 2;
}
message DeletePermissionRequest {
  string name = 1;
}


message GetAudienceRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListAudiencesRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListAudiencesResponse {
  repeated authwise.types.core.v1alpha1.Audience list = 1;
  string next_page_token = 2;
}

message CreateAudienceRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Audience audience = 2;
  bool create_default_scopes = 3;
}

message PatchAudienceRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Audience audience = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateAudienceRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Audience audience = 2;
}
message DeleteAudienceRequest {
  string name = 1;
}


message GetScopeRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListScopesRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListScopesResponse {
  repeated authwise.types.core.v1alpha1.Scope list = 1;
  string next_page_token = 2;
}

message CreateScopeRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Scope scope = 2;
}

message PatchScopeRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Scope scope = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateScopeRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Scope scope = 2;
}
message DeleteScopeRequest {
  string name = 1;
}


message ListPermissionsByScopeRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
  string selection = 4;
}

message ListPermissionsByScopeResponse {
  repeated authwise.types.core.v1alpha1.Permission permissions = 1;
  string next_page_token = 2;
}

message AssociatePermissionsToScopeRequest {
  string name = 1;
  authwise.types.core.v1alpha1.AssociationRequest association = 2;
}

		
message GetEventRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListEventsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListEventsResponse {
  repeated authwise.types.core.v1alpha1.Event list = 1;
  string next_page_token = 2;
}

message SearchEventsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3; 
  string page_token = 4;
  string selection = 5;
  repeated authwise.types.core.v1alpha1.SearchPredicate criteria = 6;
}

message EventSearchResult {
  float score = 1;
  authwise.types.core.v1alpha1.Event entity = 2;
}

message EventSearchPredicatesRequest {
  string parent = 7;
}

message EventSearchPredicatesResponse {
  repeated authwise.types.core.v1alpha1.SearchPredicateDescriptor predicates = 1;
}

message SearchEventsResponse {
  repeated EventSearchResult list = 1;
  string next_page_token = 2;
}

message GetThemeRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListThemesRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListThemesResponse {
  repeated authwise.types.core.v1alpha1.Theme list = 1;
  string next_page_token = 2;
}

message CreateThemeRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Theme theme = 2;
}

message PatchThemeRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Theme theme = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateThemeRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Theme theme = 2;
}
message DeleteThemeRequest {
  string name = 1;
}


message GetAppearanceProfileRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListAppearanceProfilesRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListAppearanceProfilesResponse {
  repeated authwise.types.core.v1alpha1.AppearanceProfile list = 1;
  string next_page_token = 2;
}

message CreateAppearanceProfileRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.AppearanceProfile appearance_profile = 2;
}

message PatchAppearanceProfileRequest {
  string name = 1;
  authwise.types.core.v1alpha1.AppearanceProfile appearance_profile = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateAppearanceProfileRequest {
  string name = 1;
  authwise.types.core.v1alpha1.AppearanceProfile appearance_profile = 2;
}
message DeleteAppearanceProfileRequest {
  string name = 1;
}


message GetEndpointRequest {
  string name = 1;
  repeated string fields = 2;
}

message ListEndpointsRequest {
  string parent = 1;
  repeated string fields = 2;
  int32 page_size = 3;
  string page_token = 4;
  string selection = 5;
}

message ListEndpointsResponse {
  repeated authwise.types.core.v1alpha1.Endpoint list = 1;
  string next_page_token = 2;
}

message CreateEndpointRequest {
  string parent = 1;
  authwise.types.core.v1alpha1.Endpoint endpoint = 2;
}

message PatchEndpointRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Endpoint endpoint = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateEndpointRequest {
  string name = 1;
  authwise.types.core.v1alpha1.Endpoint endpoint = 2;
}
message DeleteEndpointRequest {
  string name = 1;
}



